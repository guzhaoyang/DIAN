// Decompiled with JetBrains decompiler
// Type: DoNet.Utility.Database.SqlInjectionReject
// Assembly: DoNet.Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AD5DA16A-6F4C-4458-AC23-48055BBFFF84
// Assembly location: D:\Dian.Web\bin\DoNet.Utility.dll

using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace DoNet.Utility.Database
{
  public static class SqlInjectionReject
  {
    private static readonly string[] TsqlKeyWords = new string[174]
    {
      "ADD",
      "EXCEPT",
      "PERCENT",
      "ALL",
      "EXEC",
      "PLAN",
      "ALTER",
      "EXECUTE",
      "PRECISION",
      "AND",
      "EXISTS",
      "PRIMARY",
      "ANY",
      "EXIT",
      "PRINT",
      "AS",
      "FETCH",
      "PROC",
      "ASC",
      "FILE",
      "PROCEDURE",
      "AUTHORIZATION",
      "FILLFACTOR",
      "PUBLIC",
      "BACKUP",
      "FOR",
      "RAISERROR",
      "BEGIN",
      "FOREIGN",
      "READ",
      "BETWEEN",
      "FREETEXT",
      "READTEXT",
      "BREAK",
      "FREETEXTTABLE",
      "RECONFIGURE",
      "BROWSE",
      "FROM",
      "REFERENCES",
      "BULK",
      "FULL",
      "REPLICATION",
      "BY",
      "FUNCTION",
      "RESTORE",
      "CASCADE",
      "GOTO",
      "RESTRICT",
      "CASE",
      "GRANT",
      "RETURN",
      "CHECK",
      "GROUP",
      "REVOKE",
      "CHECKPOINT",
      "HAVING",
      "RIGHT",
      "CLOSE",
      "HOLDLOCK",
      "ROLLBACK",
      "CLUSTERED",
      "IDENTITY",
      "ROWCOUNT",
      "COALESCE",
      "IDENTITY_INSERT",
      "ROWGUIDCOL",
      "COLLATE",
      "IDENTITYCOL",
      "RULE",
      "COLUMN",
      "IF",
      "SAVE",
      "COMMIT",
      "IN",
      "SCHEMA",
      "COMPUTE",
      "INDEX",
      "SELECT",
      "CONSTRAINT",
      "INNER",
      "SESSION_USER",
      "CONTAINS",
      "INSERT",
      "SET",
      "CONTAINSTABLE",
      "INTERSECT",
      "SETUSER",
      "CONTINUE",
      "INTO",
      "SHUTDOWN",
      "CONVERT",
      "IS",
      "SOME",
      "CREATE",
      "JOIN",
      "STATISTICS",
      "CROSS",
      "KEY",
      "SYSTEM_USER",
      "CURRENT",
      "KILL",
      "TABLE",
      "CURRENT_DATE",
      "LEFT",
      "TEXTSIZE",
      "CURRENT_TIME",
      "LIKE",
      "THEN",
      "CURRENT_TIMESTAMP",
      "LINENO",
      "TO",
      "CURRENT_USER",
      "LOAD",
      "TOP",
      "CURSOR",
      "NATIONAL",
      "TRAN",
      "DATABASE",
      "NOCHECK",
      "TRANSACTION",
      "DBCC",
      "NONCLUSTERED",
      "TRIGGER",
      "DEALLOCATE",
      "NOT",
      "TRUNCATE",
      "DECLARE",
      "NULL",
      "TSEQUAL",
      "DEFAULT",
      "NULLIF",
      "UNION",
      "DELETE",
      "OF",
      "UNIQUE",
      "DENY",
      "OFF",
      "UPDATE",
      "DESC",
      "OFFSETS",
      "UPDATETEXT",
      "DISK",
      "ON",
      "USE",
      "DISTINCT",
      "OPEN",
      "USER",
      "DISTRIBUTED",
      "OPENDATASOURCE",
      "VALUES",
      "DOUBLE",
      "OPENQUERY",
      "VARYING",
      "DROP",
      "OPENROWSET",
      "VIEW",
      "DUMMY",
      "OPENXML",
      "WAITFOR",
      "DUMP",
      "OPTION",
      "WHEN",
      "ELSE",
      "OR",
      "WHERE",
      "END",
      "ORDER",
      "WHILE",
      "ERRLVL",
      "OUTER",
      "WITH",
      "ESCAPE",
      "OVER",
      "WRITETEXT"
    };
    private static readonly string[] OdbcKeyWords = new string[235]
    {
      "ABSOLUTE",
      "EXEC",
      "OVERLAPS",
      "ACTION",
      "EXECUTE",
      "PAD",
      "ADA",
      "EXISTS",
      "PARTIAL",
      "ADD",
      "EXTERNAL",
      "PASCAL",
      "ALL",
      "EXTRACT",
      "POSITION",
      "ALLOCATE",
      "FALSE",
      "PRECISION",
      "ALTER",
      "FETCH",
      "PREPARE",
      "AND",
      "FIRST",
      "PRESERVE",
      "ANY",
      "FLOAT",
      "PRIMARY",
      "ARE",
      "FOR",
      "PRIOR",
      "AS",
      "FOREIGN",
      "PRIVILEGES",
      "ASC",
      "FORTRAN",
      "PROCEDURE",
      "ASSERTION",
      "FOUND",
      "PUBLIC",
      "AT",
      "FROM",
      "READ",
      "AUTHORIZATION",
      "FULL",
      "REAL",
      "AVG",
      "GET",
      "REFERENCES",
      "BEGIN",
      "GLOBAL",
      "RELATIVE",
      "BETWEEN",
      "GO",
      "RESTRICT",
      "BIT",
      "GOTO",
      "REVOKE",
      "BIT_LENGTH",
      "GRANT",
      "RIGHT",
      "BOTH",
      "GROUP",
      "ROLLBACK",
      "BY",
      "HAVING",
      "ROWS",
      "CASCADE",
      "HOUR",
      "SCHEMA",
      "CASCADED",
      "IDENTITY",
      "SCROLL",
      "CASE",
      "IMMEDIATE",
      "SECOND",
      "CAST",
      "IN",
      "SECTION",
      "CATALOG",
      "INCLUDE",
      "SELECT",
      "CHAR",
      "INDEX",
      "SESSION",
      "CHAR_LENGTH",
      "INDICATOR",
      "SESSION_USER",
      "CHARACTER",
      "INITIALLY",
      "SET",
      "CHARACTER_LENGTH",
      "INNER",
      "SIZE",
      "CHECK",
      "INPUT",
      "SMALLINT",
      "CLOSE",
      "INSENSITIVE",
      "SOME",
      "COALESCE",
      "INSERT",
      "SPACE",
      "COLLATE",
      "INT",
      "SQL",
      "COLLATION",
      "INTEGER",
      "SQLCA",
      "COLUMN",
      "INTERSECT",
      "SQLCODE",
      "COMMIT",
      "INTERVAL",
      "SQLERROR",
      "CONNECT",
      "INTO",
      "SQLSTATE",
      "CONNECTION",
      "IS",
      "SQLWARNING",
      "CONSTRAINT",
      "ISOLATION",
      "SUBSTRING",
      "CONSTRAINTS",
      "JOIN",
      "SUM",
      "CONTINUE",
      "KEY",
      "SYSTEM_USER",
      "CONVERT",
      "LANGUAGE",
      "TABLE",
      "CORRESPONDING",
      "LAST",
      "TEMPORARY",
      "COUNT",
      "LEADING",
      "THEN",
      "CREATE",
      "LEFT",
      "TIME",
      "CROSS",
      "LEVEL",
      "TIMESTAMP",
      "CURRENT",
      "LIKE",
      "TIMEZONE_HOUR",
      "CURRENT_DATE",
      "LOCAL",
      "TIMEZONE_MINUTE",
      "CURRENT_TIME",
      "LOWER",
      "TO",
      "CURRENT_TIMESTAMP",
      "MATCH",
      "TRAILING",
      "CURRENT_USER",
      "MAX",
      "TRANSACTION",
      "CURSOR",
      "MIN",
      "TRANSLATE",
      "DATE",
      "MINUTE",
      "TRANSLATION",
      "DAY",
      "MODULE",
      "TRIM",
      "DEALLOCATE",
      "MONTH",
      "TRUE",
      "DEC",
      "NAMES",
      "UNION",
      "DECIMAL",
      "NATIONAL",
      "UNIQUE",
      "DECLARE",
      "NATURAL",
      "UNKNOWN",
      "DEFAULT",
      "NCHAR",
      "UPDATE",
      "DEFERRABLE",
      "NEXT",
      "UPPER",
      "DEFERRED",
      "NO",
      "USAGE",
      "DELETE",
      "NONE",
      "USER",
      "DESC",
      "NOT",
      "USING",
      "DESCRIBE",
      "NULL",
      "VALUE",
      "DESCRIPTOR",
      "NULLIF",
      "VALUES",
      "DIAGNOSTICS",
      "NUMERIC",
      "VARCHAR",
      "DISCONNECT",
      "OCTET_LENGTH",
      "VARYING",
      "DISTINCT",
      "OF",
      "VIEW",
      "DOMAIN",
      "ON",
      "WHEN",
      "DOUBLE",
      "ONLY",
      "WHENEVER",
      "DROP",
      "OPEN",
      "WHERE",
      "ELSE",
      "OPTION",
      "WITH",
      "END",
      "OR",
      "WORK",
      "END-EXEC",
      "ORDER",
      "WRITE",
      "ESCAPE",
      "OUTER",
      "YEAR",
      "EXCEPT",
      "OUTPUT",
      "ZONE",
      "EXCEPTION"
    };
    private static readonly string[] SpecialWords = new string[19]
    {
      "'",
      "[",
      "]",
      "\\",
      "%",
      "_",
      ";",
      "/",
      "*",
      "-",
      "--",
      "=",
      ">",
      "<",
      "<>",
      "!=",
      "/*",
      "*/",
      "\n"
    };
    private static readonly Regex DateTimeRule = new Regex("^(\\d{2,4}-\\d{1,2}-\\d{1,2}|\\d{2,4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}|\\d{2,4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2})$");
    private static readonly Regex PartDateTimeRule = new Regex("(\\d{2,4}-\\d{1,2}-\\d{1,2}|\\d{2,4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}|\\d{2,4}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2})");

    public static bool CheckMssqlParameter(string sqlParameter)
    {
      sqlParameter = sqlParameter.ToUpper();
      if (sqlParameter == "-1" || SqlInjectionReject.DateTimeRule.IsMatch(sqlParameter))
        return true;
      MatchCollection matchCollection = SqlInjectionReject.PartDateTimeRule.Matches(sqlParameter);
      if (matchCollection.Count > 0)
      {
        for (int i = 0; i < matchCollection.Count; ++i)
          sqlParameter = sqlParameter.Replace(matchCollection[i].Groups[1].Value, "");
      }
      foreach (string specialWord in SqlInjectionReject.SpecialWords)
      {
        if (sqlParameter.Contains(specialWord))
          return false;
      }
      string[] array = ((IEnumerable<string>) sqlParameter.Split(' ')).ToArray<string>();
      bool flag = true;
      foreach (string str in array)
      {
        if (((IEnumerable<string>) SqlInjectionReject.TsqlKeyWords).Contains<string>(str))
        {
          flag = false;
          break;
        }
        if (((IEnumerable<string>) SqlInjectionReject.OdbcKeyWords).Contains<string>(str))
        {
          flag = false;
          break;
        }
      }
      return flag;
    }
  }
}
